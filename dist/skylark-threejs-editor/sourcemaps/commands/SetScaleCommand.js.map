{"version":3,"sources":["commands/SetScaleCommand.js"],"names":["define","Command","THREE","SetScaleCommand","editor","object","newScale","optionalOldScale","call","this","type","name","updatable","undefined","oldScale","scale","clone","prototype","execute","copy","updateMatrixWorld","signals","objectChanged","dispatch","undo","update","command","toJSON","output","objectUuid","uuid","toArray","fromJSON","json","objectByUuid","Vector3","fromArray"],"mappings":";;;;;;;AAAAA,QACI,aACA,sBACD,SAAUC,EAASC,GAClB,aACA,IAAIC,EAAkB,SAAUC,EAAQC,EAAQC,EAAUC,GACtDN,EAAQO,KAAKC,KAAML,GACnBK,KAAKC,KAAO,kBACZD,KAAKE,KAAO,YACZF,KAAKG,WAAY,EACjBH,KAAKJ,OAASA,OACCQ,IAAXR,QAAqCQ,IAAbP,IACxBG,KAAKK,SAAWT,EAAOU,MAAMC,QAC7BP,KAAKH,SAAWA,EAASU,cAEJH,IAArBN,IACAE,KAAKK,SAAWP,EAAiBS,UA+BzC,OA5BAb,EAAgBc,WACZC,QAAS,WACLT,KAAKJ,OAAOU,MAAMI,KAAKV,KAAKH,UAC5BG,KAAKJ,OAAOe,mBAAkB,GAC9BX,KAAKL,OAAOiB,QAAQC,cAAcC,SAASd,KAAKJ,SAEpDmB,KAAM,WACFf,KAAKJ,OAAOU,MAAMI,KAAKV,KAAKK,UAC5BL,KAAKJ,OAAOe,mBAAkB,GAC9BX,KAAKL,OAAOiB,QAAQC,cAAcC,SAASd,KAAKJ,SAEpDoB,OAAQ,SAAUC,GACdjB,KAAKH,SAASa,KAAKO,EAAQpB,WAE/BqB,OAAQ,WACJ,IAAIC,EAAS3B,EAAQgB,UAAUU,OAAOnB,KAAKC,MAI3C,OAHAmB,EAAOC,WAAapB,KAAKJ,OAAOyB,KAChCF,EAAOd,SAAWL,KAAKK,SAASiB,UAChCH,EAAOtB,SAAWG,KAAKH,SAASyB,UACzBH,GAEXI,SAAU,SAAUC,GAChBhC,EAAQgB,UAAUe,SAASxB,KAAKC,KAAMwB,GACtCxB,KAAKJ,OAASI,KAAKL,OAAO8B,aAAaD,EAAKJ,YAC5CpB,KAAKK,UAAW,IAAIZ,EAAMiC,SAAUC,UAAUH,EAAKnB,UACnDL,KAAKH,UAAW,IAAIJ,EAAMiC,SAAUC,UAAUH,EAAK3B,YAGpDH","file":"../../commands/SetScaleCommand.js","sourcesContent":["define([\n    '../Command',\n    '../skylark-threejs'\n], function (Command, THREE) {\n    'use strict';\n    var SetScaleCommand = function (editor, object, newScale, optionalOldScale) {\n        Command.call(this, editor);\n        this.type = 'SetScaleCommand';\n        this.name = 'Set Scale';\n        this.updatable = true;\n        this.object = object;\n        if (object !== undefined && newScale !== undefined) {\n            this.oldScale = object.scale.clone();\n            this.newScale = newScale.clone();\n        }\n        if (optionalOldScale !== undefined) {\n            this.oldScale = optionalOldScale.clone();\n        }\n    };\n    SetScaleCommand.prototype = {\n        execute: function () {\n            this.object.scale.copy(this.newScale);\n            this.object.updateMatrixWorld(true);\n            this.editor.signals.objectChanged.dispatch(this.object);\n        },\n        undo: function () {\n            this.object.scale.copy(this.oldScale);\n            this.object.updateMatrixWorld(true);\n            this.editor.signals.objectChanged.dispatch(this.object);\n        },\n        update: function (command) {\n            this.newScale.copy(command.newScale);\n        },\n        toJSON: function () {\n            var output = Command.prototype.toJSON.call(this);\n            output.objectUuid = this.object.uuid;\n            output.oldScale = this.oldScale.toArray();\n            output.newScale = this.newScale.toArray();\n            return output;\n        },\n        fromJSON: function (json) {\n            Command.prototype.fromJSON.call(this, json);\n            this.object = this.editor.objectByUuid(json.objectUuid);\n            this.oldScale = new THREE.Vector3().fromArray(json.oldScale);\n            this.newScale = new THREE.Vector3().fromArray(json.newScale);\n        }\n    };\n    return SetScaleCommand;\n});"]}