{"version":3,"sources":["commands/SetMaterialMapCommand.js"],"names":["define","Command","THREE","SetMaterialMapCommand","editor","object","mapName","newMap","materialSlot","call","this","type","name","material","getObjectMaterial","oldMap","undefined","prototype","execute","needsUpdate","signals","materialChanged","dispatch","undo","toJSON","output","objectUuid","uuid","serializeMap","map","meta","geometries","materials","textures","images","json","cache","values","key","data","metadata","push","extractFromCache","length","sourceFile","fromJSON","parseTexture","loader","ObjectLoader","parseImages","parseTextures","objectByUuid"],"mappings":";;;;;;;AAAAA,QACI,aACA,sBACD,SAAUC,EAASC,GAClB,aACA,IAAIC,EAAwB,SAAUC,EAAQC,EAAQC,EAASC,EAAQC,GACnEP,EAAQQ,KAAKC,KAAMN,GACnBM,KAAKC,KAAO,wBACZD,KAAKE,KAAO,gBAAkBN,EAC9BI,KAAKL,OAASA,EACdK,KAAKG,SAAWH,KAAKN,OAAOU,kBAAkBT,EAAQG,GACtDE,KAAKK,YAAoBC,IAAXX,EAAuBK,KAAKG,SAASP,QAAWU,EAC9DN,KAAKH,OAASA,EACdG,KAAKJ,QAAUA,GAiEnB,OA/DAH,EAAsBc,WAClBC,QAAS,WACLR,KAAKG,SAASH,KAAKJ,SAAWI,KAAKH,OACnCG,KAAKG,SAASM,aAAc,EAC5BT,KAAKN,OAAOgB,QAAQC,gBAAgBC,SAASZ,KAAKG,WAEtDU,KAAM,WACFb,KAAKG,SAASH,KAAKJ,SAAWI,KAAKK,OACnCL,KAAKG,SAASM,aAAc,EAC5BT,KAAKN,OAAOgB,QAAQC,gBAAgBC,SAASZ,KAAKG,WAEtDW,OAAQ,WACJ,IAAIC,EAASxB,EAAQgB,UAAUO,OAAOf,KAAKC,MAK3C,OAJAe,EAAOC,WAAahB,KAAKL,OAAOsB,KAChCF,EAAOnB,QAAUI,KAAKJ,QACtBmB,EAAOlB,OAASqB,EAAalB,KAAKH,QAClCkB,EAAOV,OAASa,EAAalB,KAAKK,QAC3BU,EACP,SAASG,EAAaC,GAClB,GAAY,OAARA,QAAwBb,IAARa,EAChB,OAAO,KACX,IAAIC,GACAC,cACAC,aACAC,YACAC,WAEAC,EAAON,EAAIL,OAAOM,GAClBI,EAMR,SAA0BE,GACtB,IAAIC,KACJ,IAAK,IAAIC,KAAOF,EAAO,CACnB,IAAIG,EAAOH,EAAME,UACVC,EAAKC,SACZH,EAAOI,KAAKF,GAEhB,OAAOF,EAbMK,CAAiBZ,EAAKI,QAInC,OAHIA,EAAOS,OAAS,IAChBR,EAAKD,OAASA,GAClBC,EAAKS,WAAaf,EAAIe,WACfT,IAYfU,SAAU,SAAUV,GAMhB,SAASW,EAAaX,GAClB,IAAIN,EAAM,KACV,GAAa,OAATM,EAAe,CACf,IAAIY,EAAS,IAAI7C,EAAM8C,aACnBd,EAASa,EAAOE,YAAYd,EAAKD,SAErCL,EADekB,EAAOG,eAAef,GAAOD,GAC7BC,EAAKR,OAChBiB,WAAaT,EAAKS,WAE1B,OAAOf,EAdX5B,EAAQgB,UAAU4B,SAASpC,KAAKC,KAAMyB,GACtCzB,KAAKL,OAASK,KAAKN,OAAO+C,aAAahB,EAAKT,YAC5ChB,KAAKJ,QAAU6B,EAAK7B,QACpBI,KAAKK,OAAS+B,EAAaX,EAAKpB,QAChCL,KAAKH,OAASuC,EAAaX,EAAK5B,UAcjCJ","file":"../../commands/SetMaterialMapCommand.js","sourcesContent":["define([\n    '../Command',\n    '../skylark-threejs'\n], function (Command, THREE) {\n    'use strict';\n    var SetMaterialMapCommand = function (editor, object, mapName, newMap, materialSlot) {\n        Command.call(this, editor);\n        this.type = 'SetMaterialMapCommand';\n        this.name = 'Set Material.' + mapName;\n        this.object = object;\n        this.material = this.editor.getObjectMaterial(object, materialSlot);\n        this.oldMap = object !== undefined ? this.material[mapName] : undefined;\n        this.newMap = newMap;\n        this.mapName = mapName;\n    };\n    SetMaterialMapCommand.prototype = {\n        execute: function () {\n            this.material[this.mapName] = this.newMap;\n            this.material.needsUpdate = true;\n            this.editor.signals.materialChanged.dispatch(this.material);\n        },\n        undo: function () {\n            this.material[this.mapName] = this.oldMap;\n            this.material.needsUpdate = true;\n            this.editor.signals.materialChanged.dispatch(this.material);\n        },\n        toJSON: function () {\n            var output = Command.prototype.toJSON.call(this);\n            output.objectUuid = this.object.uuid;\n            output.mapName = this.mapName;\n            output.newMap = serializeMap(this.newMap);\n            output.oldMap = serializeMap(this.oldMap);\n            return output;\n            function serializeMap(map) {\n                if (map === null || map === undefined)\n                    return null;\n                var meta = {\n                    geometries: {},\n                    materials: {},\n                    textures: {},\n                    images: {}\n                };\n                var json = map.toJSON(meta);\n                var images = extractFromCache(meta.images);\n                if (images.length > 0)\n                    json.images = images;\n                json.sourceFile = map.sourceFile;\n                return json;\n            }\n            function extractFromCache(cache) {\n                var values = [];\n                for (var key in cache) {\n                    var data = cache[key];\n                    delete data.metadata;\n                    values.push(data);\n                }\n                return values;\n            }\n        },\n        fromJSON: function (json) {\n            Command.prototype.fromJSON.call(this, json);\n            this.object = this.editor.objectByUuid(json.objectUuid);\n            this.mapName = json.mapName;\n            this.oldMap = parseTexture(json.oldMap);\n            this.newMap = parseTexture(json.newMap);\n            function parseTexture(json) {\n                var map = null;\n                if (json !== null) {\n                    var loader = new THREE.ObjectLoader();\n                    var images = loader.parseImages(json.images);\n                    var textures = loader.parseTextures([json], images);\n                    map = textures[json.uuid];\n                    map.sourceFile = json.sourceFile;\n                }\n                return map;\n            }\n        }\n    };\n    return SetMaterialMapCommand;\n});"]}