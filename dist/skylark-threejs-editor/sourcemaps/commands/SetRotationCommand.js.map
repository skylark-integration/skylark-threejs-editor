{"version":3,"sources":["commands/SetRotationCommand.js"],"names":["define","Command","THREE","SetRotationCommand","editor","object","newRotation","optionalOldRotation","call","this","type","name","updatable","undefined","oldRotation","rotation","clone","prototype","execute","copy","updateMatrixWorld","signals","objectChanged","dispatch","undo","update","command","toJSON","output","objectUuid","uuid","toArray","fromJSON","json","objectByUuid","Euler","fromArray"],"mappings":";;;;;;;AAAAA,QACI,aACA,sBACD,SAAUC,EAASC,GAClB,aACA,IAAIC,EAAqB,SAAUC,EAAQC,EAAQC,EAAaC,GAC5DN,EAAQO,KAAKC,KAAML,GACnBK,KAAKC,KAAO,qBACZD,KAAKE,KAAO,eACZF,KAAKG,WAAY,EACjBH,KAAKJ,OAASA,OACCQ,IAAXR,QAAwCQ,IAAhBP,IACxBG,KAAKK,YAAcT,EAAOU,SAASC,QACnCP,KAAKH,YAAcA,EAAYU,cAEPH,IAAxBN,IACAE,KAAKK,YAAcP,EAAoBS,UA+B/C,OA5BAb,EAAmBc,WACfC,QAAS,WACLT,KAAKJ,OAAOU,SAASI,KAAKV,KAAKH,aAC/BG,KAAKJ,OAAOe,mBAAkB,GAC9BX,KAAKL,OAAOiB,QAAQC,cAAcC,SAASd,KAAKJ,SAEpDmB,KAAM,WACFf,KAAKJ,OAAOU,SAASI,KAAKV,KAAKK,aAC/BL,KAAKJ,OAAOe,mBAAkB,GAC9BX,KAAKL,OAAOiB,QAAQC,cAAcC,SAASd,KAAKJ,SAEpDoB,OAAQ,SAAUC,GACdjB,KAAKH,YAAYa,KAAKO,EAAQpB,cAElCqB,OAAQ,WACJ,IAAIC,EAAS3B,EAAQgB,UAAUU,OAAOnB,KAAKC,MAI3C,OAHAmB,EAAOC,WAAapB,KAAKJ,OAAOyB,KAChCF,EAAOd,YAAcL,KAAKK,YAAYiB,UACtCH,EAAOtB,YAAcG,KAAKH,YAAYyB,UAC/BH,GAEXI,SAAU,SAAUC,GAChBhC,EAAQgB,UAAUe,SAASxB,KAAKC,KAAMwB,GACtCxB,KAAKJ,OAASI,KAAKL,OAAO8B,aAAaD,EAAKJ,YAC5CpB,KAAKK,aAAc,IAAIZ,EAAMiC,OAAQC,UAAUH,EAAKnB,aACpDL,KAAKH,aAAc,IAAIJ,EAAMiC,OAAQC,UAAUH,EAAK3B,eAGrDH","file":"../../commands/SetRotationCommand.js","sourcesContent":["define([\n    '../Command',\n    '../skylark-threejs'\n], function (Command, THREE) {\n    'use strict';\n    var SetRotationCommand = function (editor, object, newRotation, optionalOldRotation) {\n        Command.call(this, editor);\n        this.type = 'SetRotationCommand';\n        this.name = 'Set Rotation';\n        this.updatable = true;\n        this.object = object;\n        if (object !== undefined && newRotation !== undefined) {\n            this.oldRotation = object.rotation.clone();\n            this.newRotation = newRotation.clone();\n        }\n        if (optionalOldRotation !== undefined) {\n            this.oldRotation = optionalOldRotation.clone();\n        }\n    };\n    SetRotationCommand.prototype = {\n        execute: function () {\n            this.object.rotation.copy(this.newRotation);\n            this.object.updateMatrixWorld(true);\n            this.editor.signals.objectChanged.dispatch(this.object);\n        },\n        undo: function () {\n            this.object.rotation.copy(this.oldRotation);\n            this.object.updateMatrixWorld(true);\n            this.editor.signals.objectChanged.dispatch(this.object);\n        },\n        update: function (command) {\n            this.newRotation.copy(command.newRotation);\n        },\n        toJSON: function () {\n            var output = Command.prototype.toJSON.call(this);\n            output.objectUuid = this.object.uuid;\n            output.oldRotation = this.oldRotation.toArray();\n            output.newRotation = this.newRotation.toArray();\n            return output;\n        },\n        fromJSON: function (json) {\n            Command.prototype.fromJSON.call(this, json);\n            this.object = this.editor.objectByUuid(json.objectUuid);\n            this.oldRotation = new THREE.Euler().fromArray(json.oldRotation);\n            this.newRotation = new THREE.Euler().fromArray(json.newRotation);\n        }\n    };\n    return SetRotationCommand;\n});"]}