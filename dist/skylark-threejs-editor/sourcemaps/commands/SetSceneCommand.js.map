{"version":3,"sources":["commands/SetSceneCommand.js"],"names":["define","Command","SetUuidCommand","SetValueCommand","AddObjectCommand","SetSceneCommand","editor","scene","call","this","type","name","cmdArray","undefined","push","uuid","JSON","parse","stringify","userData","children","length","child","pop","prototype","execute","signals","sceneGraphChanged","active","i","dispatch","undo","toJSON","output","cmds","fromJSON","json","cmd","window"],"mappings":";;;;;;;AAAAA,QACI,aACA,mBACA,oBACA,sBACD,SAAUC,EAASC,EAAgBC,EAAiBC,GACnD,aACA,IAAIC,EAAkB,SAAUC,EAAQC,GAKpC,GAJAN,EAAQO,KAAKC,KAAMH,GACnBG,KAAKC,KAAO,kBACZD,KAAKE,KAAO,YACZF,KAAKG,iBACSC,IAAVN,EAIA,IAHAE,KAAKG,SAASE,KAAK,IAAIZ,EAAeO,KAAKH,OAAQG,KAAKH,OAAOC,MAAOA,EAAMQ,OAC5EN,KAAKG,SAASE,KAAK,IAAIX,EAAgBM,KAAKH,OAAQG,KAAKH,OAAOC,MAAO,OAAQA,EAAMI,OACrFF,KAAKG,SAASE,KAAK,IAAIX,EAAgBM,KAAKH,OAAQG,KAAKH,OAAOC,MAAO,WAAYS,KAAKC,MAAMD,KAAKE,UAAUX,EAAMY,aAC5GZ,EAAMa,SAASC,OAAS,GAAG,CAC9B,IAAIC,EAAQf,EAAMa,SAASG,MAC3Bd,KAAKG,SAASE,KAAK,IAAIV,EAAiBK,KAAKH,OAAQgB,MAwCjE,OApCAjB,EAAgBmB,WACZC,QAAS,WACLhB,KAAKH,OAAOoB,QAAQC,kBAAkBC,QAAS,EAC/C,IAAK,IAAIC,EAAI,EAAGA,EAAIpB,KAAKG,SAASS,OAAQQ,IACtCpB,KAAKG,SAASiB,GAAGJ,UAErBhB,KAAKH,OAAOoB,QAAQC,kBAAkBC,QAAS,EAC/CnB,KAAKH,OAAOoB,QAAQC,kBAAkBG,YAE1CC,KAAM,WACFtB,KAAKH,OAAOoB,QAAQC,kBAAkBC,QAAS,EAC/C,IAAK,IAAIC,EAAIpB,KAAKG,SAASS,OAAS,EAAGQ,GAAK,EAAGA,IAC3CpB,KAAKG,SAASiB,GAAGE,OAErBtB,KAAKH,OAAOoB,QAAQC,kBAAkBC,QAAS,EAC/CnB,KAAKH,OAAOoB,QAAQC,kBAAkBG,YAE1CE,OAAQ,WAGJ,IAFA,IAAIC,EAAShC,EAAQuB,UAAUQ,OAAOxB,KAAKC,MACvCyB,KACKL,EAAI,EAAGA,EAAIpB,KAAKG,SAASS,OAAQQ,IACtCK,EAAKpB,KAAKL,KAAKG,SAASiB,GAAGG,UAG/B,OADAC,EAAOC,KAAOA,EACPD,GAEXE,SAAU,SAAUC,GAChBnC,EAAQuB,UAAUW,SAAS3B,KAAKC,KAAM2B,GAEtC,IADA,IAAIF,EAAOE,EAAKF,KACPL,EAAI,EAAGA,EAAIK,EAAKb,OAAQQ,IAAK,CAClC,IAAIQ,EAAM,IAAIC,OAAOJ,EAAKL,GAAGnB,MAC7B2B,EAAIF,SAASD,EAAKL,IAClBpB,KAAKG,SAASE,KAAKuB,OAItBhC,gBAAAA","file":"../../commands/SetSceneCommand.js","sourcesContent":["define([\n    '../Command',\n    './SetUuidCommand',\n    './SetValueCommand',\n    './AddObjectCommand'\n], function (Command, SetUuidCommand, SetValueCommand, AddObjectCommand) {\n    'use strict';\n    var SetSceneCommand = function (editor, scene) {\n        Command.call(this, editor);\n        this.type = 'SetSceneCommand';\n        this.name = 'Set Scene';\n        this.cmdArray = [];\n        if (scene !== undefined) {\n            this.cmdArray.push(new SetUuidCommand(this.editor, this.editor.scene, scene.uuid));\n            this.cmdArray.push(new SetValueCommand(this.editor, this.editor.scene, 'name', scene.name));\n            this.cmdArray.push(new SetValueCommand(this.editor, this.editor.scene, 'userData', JSON.parse(JSON.stringify(scene.userData))));\n            while (scene.children.length > 0) {\n                var child = scene.children.pop();\n                this.cmdArray.push(new AddObjectCommand(this.editor, child));\n            }\n        }\n    };\n    SetSceneCommand.prototype = {\n        execute: function () {\n            this.editor.signals.sceneGraphChanged.active = false;\n            for (var i = 0; i < this.cmdArray.length; i++) {\n                this.cmdArray[i].execute();\n            }\n            this.editor.signals.sceneGraphChanged.active = true;\n            this.editor.signals.sceneGraphChanged.dispatch();\n        },\n        undo: function () {\n            this.editor.signals.sceneGraphChanged.active = false;\n            for (var i = this.cmdArray.length - 1; i >= 0; i--) {\n                this.cmdArray[i].undo();\n            }\n            this.editor.signals.sceneGraphChanged.active = true;\n            this.editor.signals.sceneGraphChanged.dispatch();\n        },\n        toJSON: function () {\n            var output = Command.prototype.toJSON.call(this);\n            var cmds = [];\n            for (var i = 0; i < this.cmdArray.length; i++) {\n                cmds.push(this.cmdArray[i].toJSON());\n            }\n            output.cmds = cmds;\n            return output;\n        },\n        fromJSON: function (json) {\n            Command.prototype.fromJSON.call(this, json);\n            var cmds = json.cmds;\n            for (var i = 0; i < cmds.length; i++) {\n                var cmd = new window[cmds[i].type]();\n                cmd.fromJSON(cmds[i]);\n                this.cmdArray.push(cmd);\n            }\n        }\n    };\n    return { SetSceneCommand };\n});"]}