{"version":3,"sources":["menuitems/Edit.js"],"names":["define","mrdoobui","AddObjectCommand","RemoveObjectCommand","MultiCmdsCommand","SetMaterialValueCommand","editor","strings","container","UIPanel","setClass","title","setTextContent","getKey","add","options","undo","UIRow","onClick","option","redo","confirm","history","clear","signals","historyChanged","undos","length","redos","UIHorizontalRule","object","selected","parent","clone","execute","errors","nMaterialsChanged","path","getPath","undefined","push","name","uuid","cmds","scene","traverse","material","isShaderMaterial","shader","glslprep","minifyGlsl","vertexShader","fragmentShader","e","join","SyntaxError","line","column","message","console","error","stack","window","alert","fixColorMap","colorMaps","obj","Array","isArray","i","fixMaterial","sceneGraphChanged","dispatch","needsUpdate","map","encoding","THREE","sRGBEncoding"],"mappings":"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","file":"../../menuitems/Edit.js","sourcesContent":["define([\n    'skylark-mrdoobui',\n    '../commands/AddObjectCommand',\n    '../commands/RemoveObjectCommand',\n    '../commands/MultiCmdsCommand',\n    '../commands/SetMaterialValueCommand'\n], function (mrdoobui, AddObjectCommand, RemoveObjectCommand, MultiCmdsCommand, SetMaterialValueCommand) {\n    'use strict';\n    var MenubarEdit = function (editor) {\n        var strings = editor.strings;\n        var container = new mrdoobui.UIPanel();\n        container.setClass('menu');\n        var title = new mrdoobui.UIPanel();\n        title.setClass('title');\n        title.setTextContent(strings.getKey('menubar/edit'));\n        container.add(title);\n        var options = new mrdoobui.UIPanel();\n        options.setClass('options');\n        container.add(options);\n        var undo = new mrdoobui.UIRow();\n        undo.setClass('option');\n        undo.setTextContent(strings.getKey('menubar/edit/undo'));\n        undo.onClick(function () {\n            editor.undo();\n        });\n        options.add(undo);\n        var redo = new mrdoobui.UIRow();\n        redo.setClass('option');\n        redo.setTextContent(strings.getKey('menubar/edit/redo'));\n        redo.onClick(function () {\n            editor.redo();\n        });\n        options.add(redo);\n        var option = new mrdoobui.UIRow();\n        option.setClass('option');\n        option.setTextContent(strings.getKey('menubar/edit/clear_history'));\n        option.onClick(function () {\n            if (confirm('The Undo/Redo History will be cleared. Are you sure?')) {\n                editor.history.clear();\n            }\n        });\n        options.add(option);\n        editor.signals.historyChanged.add(function () {\n            var history = editor.history;\n            undo.setClass('option');\n            redo.setClass('option');\n            if (history.undos.length == 0) {\n                undo.setClass('inactive');\n            }\n            if (history.redos.length == 0) {\n                redo.setClass('inactive');\n            }\n        });\n        options.add(new mrdoobui.UIHorizontalRule());\n        var option = new mrdoobui.UIRow();\n        option.setClass('option');\n        option.setTextContent(strings.getKey('menubar/edit/clone'));\n        option.onClick(function () {\n            var object = editor.selected;\n            if (object.parent === null)\n                return;\n            object = object.clone();\n            editor.execute(new AddObjectCommand(editor, object));\n        });\n        options.add(option);\n        var option = new mrdoobui.UIRow();\n        option.setClass('option');\n        option.setTextContent(strings.getKey('menubar/edit/delete'));\n        option.onClick(function () {\n            var object = editor.selected;\n            if (object !== null && object.parent !== null) {\n                editor.execute(new RemoveObjectCommand(editor, object));\n            }\n        });\n        options.add(option);\n        var option = new mrdoobui.UIRow();\n        option.setClass('option');\n        option.setTextContent(strings.getKey('menubar/edit/minify_shaders'));\n        option.onClick(function () {\n            var root = editor.selected || editor.scene;\n            var errors = [];\n            var nMaterialsChanged = 0;\n            var path = [];\n            function getPath(object) {\n                path.length = 0;\n                var parent = object.parent;\n                if (parent !== undefined)\n                    getPath(parent);\n                path.push(object.name || object.uuid);\n                return path;\n            }\n            var cmds = [];\n            root.traverse(function (object) {\n                var material = object.material;\n                if (material !== undefined && material.isShaderMaterial) {\n                    try {\n                        var shader = glslprep.minifyGlsl([\n                            material.vertexShader,\n                            material.fragmentShader\n                        ]);\n                        cmds.push(new SetMaterialValueCommand(editor, object, 'vertexShader', shader[0]));\n                        cmds.push(new SetMaterialValueCommand(editor, object, 'fragmentShader', shader[1]));\n                        ++nMaterialsChanged;\n                    } catch (e) {\n                        var path = getPath(object).join('/');\n                        if (e instanceof glslprep.SyntaxError)\n                            errors.push(path + ':' + e.line + ':' + e.column + ': ' + e.message);\n                        else {\n                            errors.push(path + ': Unexpected error (see console for details).');\n                            console.error(e.stack || e);\n                        }\n                    }\n                }\n            });\n            if (nMaterialsChanged > 0) {\n                editor.execute(new MultiCmdsCommand(editor, cmds), 'Minify Shaders');\n            }\n            window.alert(nMaterialsChanged + ' material(s) were changed.\\n' + errors.join('\\n'));\n        });\n        options.add(option);\n        options.add(new mrdoobui.UIHorizontalRule());\n        var option = new mrdoobui.UIRow();\n        option.setClass('option');\n        option.setTextContent(strings.getKey('menubar/edit/fixcolormaps'));\n        option.onClick(function () {\n            editor.scene.traverse(fixColorMap);\n        });\n        options.add(option);\n        var colorMaps = [\n            'map',\n            'envMap',\n            'emissiveMap'\n        ];\n        function fixColorMap(obj) {\n            var material = obj.material;\n            if (material !== undefined) {\n                if (Array.isArray(material) === true) {\n                    for (var i = 0; i < material.length; i++) {\n                        fixMaterial(material[i]);\n                    }\n                } else {\n                    fixMaterial(material);\n                }\n                editor.signals.sceneGraphChanged.dispatch();\n            }\n        }\n        function fixMaterial(material) {\n            var needsUpdate = material.needsUpdate;\n            for (var i = 0; i < colorMaps.length; i++) {\n                var map = material[colorMaps[i]];\n                if (map) {\n                    map.encoding = THREE.sRGBEncoding;\n                    needsUpdate = true;\n                }\n            }\n            material.needsUpdate = needsUpdate;\n        }\n        return container;\n    };\n    return MenubarEdit;\n});"]}