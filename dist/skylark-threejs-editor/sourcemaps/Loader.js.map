{"version":3,"sources":["Loader.js"],"names":["define","THREE","AMFLoader","ColladaLoader","DRACOLoader","FBXLoader","GLTFLoader","KMZLoader","MD2Loader","MTLLoader","OBJLoader","PLYLoader","STLLoader","SVGLoader","TDSLoader","VTKLoader","VRMLLoader","AddObjectCommand","SetSceneCommand","LoaderUtils","editor","scope","this","handleJSON","data","undefined","metadata","type","formatVersion","version","toLowerCase","result","loader","BufferGeometryLoader","parse","mesh","Mesh","execute","console","error","ObjectLoader","setResourcePath","texturePath","isScene","fromJSON","loadItemList","items","getFilesFromItemList","files","filesMap","loadFiles","length","createFilesMap","manager","LoadingManager","setURLModifier","url","file","log","URL","createObjectURL","i","loadFile","filename","name","extension","split","pop","reader","FileReader","addEventListener","event","size","Math","floor","total","format","progress","loaded","object","target","readAsArrayBuffer","amfobject","contents","collada","scene","addAnimation","animations","readAsText","setDecoderPath","decodeDracoFile","geometry","material","MeshStandardMaterial","dracoLoader","setDRACOLoader","resultContent","magic","decodeText","Uint8Array","DataView","getUint32","json","JSON","asset","isGLTF1","alert","indexOf","blob","Blob","worker","Worker","onmessage","postMessage","Date","now","morphTargets","morphNormals","mixer","AnimationMixer","sourceType","sourceFile","readAsBinaryString","paths","group","Group","scale","multiplyScalar","y","path","MeshBasicMaterial","color","depthWrite","shapes","toShapes","j","shape","ShapeBufferGeometry","add","zip","JSZip","materials","asText","setMaterials","filter","asArrayBuffer","handleZIP"],"mappings":"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","file":"../Loader.js","sourcesContent":["define([\n    'skylark-threejs',\n    'skylark-threejs-ex/loaders/AMFLoader',\n    'skylark-threejs-ex/loaders/ColladaLoader',\n    'skylark-threejs-ex/loaders/DRACOLoader',\n    'skylark-threejs-ex/loaders/FBXLoader',\n    'skylark-threejs-ex/loaders/GLTFLoader',\n    'skylark-threejs-ex/loaders/KMZLoader',\n    'skylark-threejs-ex/loaders/MD2Loader',\n    'skylark-threejs-ex/loaders/MTLLoader',\n    'skylark-threejs-ex/loaders/OBJLoader',\n    'skylark-threejs-ex/loaders/PLYLoader',\n    'skylark-threejs-ex/loaders/STLLoader',\n    'skylark-threejs-ex/loaders/SVGLoader',\n    'skylark-threejs-ex/loaders/TDSLoader',\n    'skylark-threejs-ex/loaders/VTKLoader',\n    'skylark-threejs-ex/loaders/VRMLLoader',\n\n    './commands/AddObjectCommand',\n    './commands/SetSceneCommand',\n    './LoaderUtils'\n], function (\n    THREE, \n    AMFLoader, \n    ColladaLoader, \n    DRACOLoader, \n    FBXLoader, \n    GLTFLoader, \n    KMZLoader, \n    MD2Loader, \n    MTLLoader, \n    OBJLoader, \n    PLYLoader, \n    STLLoader, \n    SVGLoader, \n    TDSLoader, \n    VTKLoader, \n    VRMLLoader, \n    AddObjectCommand, \n    SetSceneCommand, \n    LoaderUtils\n) {\n    'use strict';\n    var Loader = function (editor) {\n        var scope = this;\n        this.texturePath = '';\n        this.loadItemList = function (items) {\n            LoaderUtils.getFilesFromItemList(items, function (files, filesMap) {\n                scope.loadFiles(files, filesMap);\n            });\n        };\n        this.loadFiles = function (files, filesMap) {\n            if (files.length > 0) {\n                var filesMap = filesMap || LoaderUtils.createFilesMap(files);\n                var manager = new THREE.LoadingManager();\n                manager.setURLModifier(function (url) {\n                    var file = filesMap[url];\n                    if (file) {\n                        console.log('Loading', url);\n                        return URL.createObjectURL(file);\n                    }\n                    return url;\n                });\n                for (var i = 0; i < files.length; i++) {\n                    scope.loadFile(files[i], manager);\n                }\n            }\n        };\n        this.loadFile = function (file, manager) {\n            var filename = file.name;\n            var extension = filename.split('.').pop().toLowerCase();\n            var reader = new FileReader();\n            reader.addEventListener('progress', function (event) {\n                var size = '(' + Math.floor(event.total / 1000).format() + ' KB)';\n                var progress = Math.floor(event.loaded / event.total * 100) + '%';\n                console.log('Loading', filename, size, progress);\n            });\n            switch (extension) {\n            case '3ds':\n                reader.addEventListener('load', function (event) {\n                    var loader = new TDSLoader();\n                    var object = loader.parse(event.target.result);\n                    editor.execute(new AddObjectCommand(editor, object));\n                }, false);\n                reader.readAsArrayBuffer(file);\n                break;\n            case 'amf':\n                reader.addEventListener('load', function (event) {\n                    var loader = new AMFLoader();\n                    var amfobject = loader.parse(event.target.result);\n                    editor.execute(new AddObjectCommand(editor, amfobject));\n                }, false);\n                reader.readAsArrayBuffer(file);\n                break;\n            case 'dae':\n                reader.addEventListener('load', function (event) {\n                    var contents = event.target.result;\n                    var loader = new ColladaLoader(manager);\n                    var collada = loader.parse(contents);\n                    collada.scene.name = filename;\n                    editor.addAnimation(collada.scene, collada.animations);\n                    editor.execute(new AddObjectCommand(editor, collada.scene));\n                }, false);\n                reader.readAsText(file);\n                break;\n            case 'drc':\n                reader.addEventListener('load', function (event) {\n                    var contents = event.target.result;\n                    var loader = new DRACOLoader();\n                    loader.setDecoderPath('../examples/js/libs/draco/');\n                    loader.decodeDracoFile(contents, function (geometry) {\n                        var material = new THREE.MeshStandardMaterial();\n                        var mesh = new THREE.Mesh(geometry, material);\n                        mesh.name = filename;\n                        editor.execute(new AddObjectCommand(editor, mesh));\n                    });\n                }, false);\n                reader.readAsArrayBuffer(file);\n                break;\n            case 'fbx':\n                reader.addEventListener('load', function (event) {\n                    var contents = event.target.result;\n                    var loader = new FBXLoader(manager);\n                    var object = loader.parse(contents);\n                    editor.addAnimation(object, object.animations);\n                    editor.execute(new AddObjectCommand(editor, object));\n                }, false);\n                reader.readAsArrayBuffer(file);\n                break;\n            case 'glb':\n                reader.addEventListener('load', function (event) {\n                    var contents = event.target.result;\n                    var dracoLoader = new DRACOLoader();\n                    dracoLoader.setDecoderPath('../examples/js/libs/draco/gltf/');\n                    var loader = new GLTFLoader();\n                    loader.setDRACOLoader(dracoLoader);\n                    loader.parse(contents, '', function (result) {\n                        var scene = result.scene;\n                        scene.name = filename;\n                        editor.addAnimation(scene, result.animations);\n                        editor.execute(new AddObjectCommand(editor, scene));\n                    });\n                }, false);\n                reader.readAsArrayBuffer(file);\n                break;\n            case 'gltf':\n                reader.addEventListener('load', function (event) {\n                    var contents = event.target.result;\n                    var loader;\n                    if (isGLTF1(contents)) {\n                        alert('Import of glTF asset not possible. Only versions >= 2.0 are supported. Please try to upgrade the file to glTF 2.0 using glTF-Pipeline.');\n                    } else {\n                        var dracoLoader = new DRACOLoader();\n                        dracoLoader.setDecoderPath('../examples/js/libs/draco/gltf/');\n                        loader = new GLTFLoader(manager);\n                        loader.setDRACOLoader(dracoLoader);\n                    }\n                    loader.parse(contents, '', function (result) {\n                        var scene = result.scene;\n                        scene.name = filename;\n                        editor.addAnimation(scene, result.animations);\n                        editor.execute(new AddObjectCommand(editor, scene));\n                    });\n                }, false);\n                reader.readAsArrayBuffer(file);\n                break;\n            case 'js':\n            case 'json':\n            case '3geo':\n            case '3mat':\n            case '3obj':\n            case '3scn':\n                reader.addEventListener('load', function (event) {\n                    var contents = event.target.result;\n                    if (contents.indexOf('postMessage') !== -1) {\n                        var blob = new Blob([contents], { type: 'text/javascript' });\n                        var url = URL.createObjectURL(blob);\n                        var worker = new Worker(url);\n                        worker.onmessage = function (event) {\n                            event.data.metadata = { version: 2 };\n                            handleJSON(event.data);\n                        };\n                        worker.postMessage(Date.now());\n                        return;\n                    }\n                    var data;\n                    try {\n                        data = JSON.parse(contents);\n                    } catch (error) {\n                        alert(error);\n                        return;\n                    }\n                    handleJSON(data);\n                }, false);\n                reader.readAsText(file);\n                break;\n            case 'kmz':\n                reader.addEventListener('load', function (event) {\n                    var loader = new KMZLoader();\n                    var collada = loader.parse(event.target.result);\n                    collada.scene.name = filename;\n                    editor.execute(new AddObjectCommand(editor, collada.scene));\n                }, false);\n                reader.readAsArrayBuffer(file);\n                break;\n            case 'md2':\n                reader.addEventListener('load', function (event) {\n                    var contents = event.target.result;\n                    var geometry = new MD2Loader().parse(contents);\n                    var material = new THREE.MeshStandardMaterial({\n                        morphTargets: true,\n                        morphNormals: true\n                    });\n                    var mesh = new THREE.Mesh(geometry, material);\n                    mesh.mixer = new THREE.AnimationMixer(mesh);\n                    mesh.name = filename;\n                    editor.addAnimation(mesh, geometry.animations);\n                    editor.execute(new AddObjectCommand(editor, mesh));\n                }, false);\n                reader.readAsArrayBuffer(file);\n                break;\n            case 'obj':\n                reader.addEventListener('load', function (event) {\n                    var contents = event.target.result;\n                    var object = new OBJLoader().parse(contents);\n                    object.name = filename;\n                    editor.execute(new AddObjectCommand(editor, object));\n                }, false);\n                reader.readAsText(file);\n                break;\n            case 'ply':\n                reader.addEventListener('load', function (event) {\n                    var contents = event.target.result;\n                    var geometry = new PLYLoader().parse(contents);\n                    geometry.sourceType = 'ply';\n                    geometry.sourceFile = file.name;\n                    var material = new THREE.MeshStandardMaterial();\n                    var mesh = new THREE.Mesh(geometry, material);\n                    mesh.name = filename;\n                    editor.execute(new AddObjectCommand(editor, mesh));\n                }, false);\n                reader.readAsArrayBuffer(file);\n                break;\n            case 'stl':\n                reader.addEventListener('load', function (event) {\n                    var contents = event.target.result;\n                    var geometry = new STLLoader().parse(contents);\n                    geometry.sourceType = 'stl';\n                    geometry.sourceFile = file.name;\n                    var material = new THREE.MeshStandardMaterial();\n                    var mesh = new THREE.Mesh(geometry, material);\n                    mesh.name = filename;\n                    editor.execute(new AddObjectCommand(editor, mesh));\n                }, false);\n                if (reader.readAsBinaryString !== undefined) {\n                    reader.readAsBinaryString(file);\n                } else {\n                    reader.readAsArrayBuffer(file);\n                }\n                break;\n            case 'svg':\n                reader.addEventListener('load', function (event) {\n                    var contents = event.target.result;\n                    var loader = new SVGLoader();\n                    var paths = loader.parse(contents).paths;\n                    var group = new THREE.Group();\n                    group.scale.multiplyScalar(0.1);\n                    group.scale.y *= -1;\n                    for (var i = 0; i < paths.length; i++) {\n                        var path = paths[i];\n                        var material = new THREE.MeshBasicMaterial({\n                            color: path.color,\n                            depthWrite: false\n                        });\n                        var shapes = path.toShapes(true);\n                        for (var j = 0; j < shapes.length; j++) {\n                            var shape = shapes[j];\n                            var geometry = new THREE.ShapeBufferGeometry(shape);\n                            var mesh = new THREE.Mesh(geometry, material);\n                            group.add(mesh);\n                        }\n                    }\n                    editor.execute(new AddObjectCommand(editor, group));\n                }, false);\n                reader.readAsText(file);\n                break;\n            case 'vtk':\n                reader.addEventListener('load', function (event) {\n                    var contents = event.target.result;\n                    var geometry = new VTKLoader().parse(contents);\n                    geometry.sourceType = 'vtk';\n                    geometry.sourceFile = file.name;\n                    var material = new THREE.MeshStandardMaterial();\n                    var mesh = new THREE.Mesh(geometry, material);\n                    mesh.name = filename;\n                    editor.execute(new AddObjectCommand(editor, mesh));\n                }, false);\n                reader.readAsText(file);\n                break;\n            case 'wrl':\n                reader.addEventListener('load', function (event) {\n                    var contents = event.target.result;\n                    var result = new VRMLLoader().parse(contents);\n                    editor.execute(new SetSceneCommand(editor, result));\n                }, false);\n                reader.readAsText(file);\n                break;\n            case 'zip':\n                reader.addEventListener('load', function (event) {\n                    handleZIP(event.target.result);\n                }, false);\n                reader.readAsBinaryString(file);\n                break;\n            default:\n                break;\n            }\n        };\n        function handleJSON(data) {\n            if (data.metadata === undefined) {\n                data.metadata = { type: 'Geometry' };\n            }\n            if (data.metadata.type === undefined) {\n                data.metadata.type = 'Geometry';\n            }\n            if (data.metadata.formatVersion !== undefined) {\n                data.metadata.version = data.metadata.formatVersion;\n            }\n            switch (data.metadata.type.toLowerCase()) {\n            case 'buffergeometry':\n                var loader = new THREE.BufferGeometryLoader();\n                var result = loader.parse(data);\n                var mesh = new THREE.Mesh(result);\n                editor.execute(new AddObjectCommand(editor, mesh));\n                break;\n            case 'geometry':\n                console.error('Loader: \"Geometry\" is no longer supported.');\n                break;\n            case 'object':\n                var loader = new THREE.ObjectLoader();\n                loader.setResourcePath(scope.texturePath);\n                loader.parse(data, function (result) {\n                    if (result.isScene) {\n                        editor.execute(new SetSceneCommand(editor, result));\n                    } else {\n                        editor.execute(new AddObjectCommand(editor, result));\n                    }\n                });\n                break;\n            case 'app':\n                editor.fromJSON(data);\n                break;\n            }\n        }\n        function handleZIP(contents) {\n            var zip = new JSZip(contents);\n            if (zip.files['model.obj'] && zip.files['materials.mtl']) {\n                var materials = new MTLLoader().parse(zip.file('materials.mtl').asText());\n                var object = new OBJLoader().setMaterials(materials).parse(zip.file('model.obj').asText());\n                editor.execute(new AddObjectCommand(editor, object));\n            }\n            zip.filter(function (path, file) {\n                var manager = new THREE.LoadingManager();\n                manager.setURLModifier(function (url) {\n                    var file = zip.files[url];\n                    if (file) {\n                        console.log('Loading', url);\n                        var blob = new Blob([file.asArrayBuffer()], { type: 'application/octet-stream' });\n                        return URL.createObjectURL(blob);\n                    }\n                    return url;\n                });\n                var extension = file.name.split('.').pop().toLowerCase();\n                switch (extension) {\n                case 'fbx':\n                    var loader = new FBXLoader(manager);\n                    var object = loader.parse(file.asArrayBuffer());\n                    editor.execute(new AddObjectCommand(editor, object));\n                    break;\n                case 'glb':\n                    var loader = new GLTFLoader();\n                    loader.parse(file.asArrayBuffer(), '', function (result) {\n                        var scene = result.scene;\n                        editor.addAnimation(scene, result.animations);\n                        editor.execute(new AddObjectCommand(editor, scene));\n                    });\n                    break;\n                case 'gltf':\n                    var loader = new GLTFLoader(manager);\n                    loader.parse(file.asText(), '', function (result) {\n                        var scene = result.scene;\n                        editor.addAnimation(scene, result.animations);\n                        editor.execute(new AddObjectCommand(editor, scene));\n                    });\n                    break;\n                }\n            });\n        }\n        function isGLTF1(contents) {\n            var resultContent;\n            if (typeof contents === 'string') {\n                resultContent = contents;\n            } else {\n                var magic = THREE.undefined.decodeText(new Uint8Array(contents, 0, 4));\n                if (magic === 'glTF') {\n                    var version = new DataView(contents).getUint32(4, true);\n                    return version < 2;\n                } else {\n                    resultContent = THREE.undefined.decodeText(new Uint8Array(contents));\n                }\n            }\n            var json = JSON.parse(resultContent);\n            return json.asset != undefined && json.asset.version[0] < 2;\n        }\n    };\n    \n    return Loader;\n});"]}